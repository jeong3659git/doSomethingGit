1.

2. 주문과 할인 도메인 설계
 - 회원은 상품을 주문한다.
 - 회원은 등급에 따라 할인 정책을 적용할 수 있다.
 - 할인정책은 VIP등급은 1000원을 할인한다.
 - 할인정책은 차후 변경될 수 있다.


회원(클라이언트) --- 1. 주문생성 ---> 주문서비스 역할-- 2. 회원 조회 ---> 회원 저장소 역할
                    회원id                     -- 3. 할인 적용 ---> 할인 정책 역할
                    상품명
                    상품가격
              <---- return -----


1. 주문생성 : 클라이언트(회원)은 주문서비스에 주문생성을 요청하다.
2. 회원조회 : 할인을 위해 회원등급이 필요하여 주문서비스는 회원 저장소에서 회원을 조회한다.
3. 할인적용 : 주문서비스는 회원 등급에 따른 할인 여부를 할인정책에 위임.
4. 결과반환


-------------------------------------------------------------------
2) 새로운 할인 정책 적용과 문제점.

- 할인정책을 변경하려면 클라이언트인 orderServiceImpl를 고쳐야한다.
   FixDiscountPolicy --> RateDiscountPolicy

  문제점
  역할 / 구현 -- ㅇ
  다형성 활용 / 인터페이스, 구현 객체를 분리 -- ㅇ
  OCP, DIP 같은 객체지향 설계원칙을 준수 -- 그렇게 보이지만 사실 아님

  DIP - 주문서비스 orderServiceimpl는 discountPolicy 인터페이스에 의존.
   >>추상(인터페이스) 뿐만아니라  구체( 구현 ) 클래스에도 의존.
   >>추상(인터페이스) 의존 : DiscountPolicy
     구체(구현) 클래스 의존: FixDiscountPolicy, RateDiscountPolicy

  OCP - 현 상태에서 기능을 확장해서 변경하려면 클라이언트(회원)코드에 영향을 준다. --> OCP를 위반.

1) 예상도
OrderServiceImpl --------------------- interface DisCountPolicy
                                            + FixDiscountPolicy
                                            + RateDiscountPolicy

2) 현 상황
OrderServiceImpl --------------------- interface DisCountPolicy
        ㄴ --------------------------->     + FixDiscountPolicy
                                            + RateDiscountPolicy

3) orderServiceimpl에서 fixdiscountpolicy를 ratediscountpolicy도 변경해야하니 이건 OCP 위반
OrderServiceImpl --------------------- interface DisCountPolicy
        ㄴ ----------- x ------------->     + FixDiscountPolicy
        ㄴ --------------------------->     + RateDiscountPolicy

---------- ---------- ----------- ----------- ------------- ------ -----------------

1) 예상도처럼 하기 위해선
private DiscountPolicy discountPolicy;  // 3) 인터페이스에만 의존하도록 변경
하지만 이대로 실행시 NPE(null pointer exception)가 발생한다.

 - 1. 관심사 분리
    인터페이스를 배역(배우의 역할) 이라고 가정할때
        A 역할(인터페이스) 에는 a배우(구현체)
        B 역할(인터페이스) 에는 b배우(구현체)


 ---- AppConfig 클래스파일
    각 서비스 별 선언 및 서비스 구현 객체 생성(new)
    생성한 객체 인스턴스의 참조(래퍼런스)를 생성자를 통해서 주입(연결)
MemberServiceImpl ---->  MemoryMemberRepository
OrderServiceImpl  ----> MemoryMemberRepository , FixDiscountPolicy

 >> 단지 MemberRepository 인터페이스만 의존한다
 >> MemberServiceImpl 의 생성자를 통해서 어떤 구현 객체를 주입할지는 오직 외부( AppConfig )에서 결정
 >> MemberServiceImpl 은 이제부터 의존관계에 대한 고민은 외부에 맡기고 실행에만 집중하면 된.



 AppConfig는 구체 클래스를 선택한다
 애플리케이션이 어떻게 동작해야 할지 전체 구성을 책임진다


 ======================== =================== ========================== =======================
3) AppConfig 리팩토링

 - 현재 상태에선 중복항목과 역할에 따른 구현이 잘 보이지않는다.

회원(클라이언트) --- 1. 주문생성 ---> 주문서비스 역할 -- 2. 회원 조회 ---> 회원 저장소 역할
                   + 회원id                                           + 회원 메모리 저장소
                   + 상품명                                           + DB 회원 저장소
                   + 상품가격
                                                -- 3. 할인 적용 ---> 할인 정책 역할
              <----4. return -----                                    + 정액 할인 정책
                                                                      + 정률 할인 정책

    public MemberService memberService(){
        return new MemberServiceImpl(new MemoryMemberRepository());
    } 을 세분화

    >>>
        public MemberService memberService(){
            return new MemberServiceImpl(
                    memberRepository()
            );
        }

         public MemberRepository memberRepository() {
             return new MemoryMemberRepository();
         }

    MemoryMemberRepository 를 다른 구현체로 변경할 때 한 부분만 변경하면 됨.


 --------------------------------------------------------------------------------------------------
3)
 새로운 구조 와 할인 정책 적용

 AppConfig 이후
    애플리케이션을 사용하는 사용영역과
    객체를 생성하고 구성하는 구성영역으로 나뉘어진다.


                        OrderServiceImpl  ------->  DiscountPolicy
                         (AppConfig부터 생성)       + FixDiscountPolicy (AppConfig부터 생성)
                                                   + RateDiscountPolicy
    사용영역
    -ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
    구성영역            AppConfig



 ------------------------------------------ ---------------------------- -------------------------

 좋은 객체 지향 설계의 5가지 원칙
  - SRP 단일 책임 원칙
        한 클래스는 하나의 책임만 가져야한다.

      - 클라이너트 객체는 직접 구현 객체를 생성하고, 연결하고, 실행하는 다양한 책임을 가지고 있음
      - SRP 단일 책임 원칙을 따르면서 관심사를 분리.
      - 구현객체를 생성하고 연결하는 책임은 AppConfig가 담당
      - 클라이언트 객체는 실행하는 책임만 담당.

  - DIP 의존관계 역전 원칙
        프로그래머는 '추상화에 의존해야지, 구체화에 의존하면 안된다' 의존성 주입은 이 원칙을 따르는 방법 중 하나다.

        - 새로운 정책을 개발 후 적용하려니 사용영역 코드도 함꼐 변경해야 했다.
            기존 클라이언트코드(OrderServiceImpl)는 DIP를 지키며 DisCountPolicy(할인) 추상화 인터페이스에 의존하는 것+
            FixDiscountPolicy 구체화 구현 클래스에도 함께 의존했다.
        - 클라이언트코드가 discountpolicy 추상화 인터페이스에만 의존하도록 코드를 변경.
        - 클라이언트코드는 인터페이스만으로는 아무것도 실행할 수 없다.
        - AppConfig가 FixDiscountPolicy 객체 인스턴스를 클라이언트 코드 대신 생성해서 클라이언트 코드에 의존관계를 주입

  - OCP
        소프트웨어 요소는 확장에는 열려 있으나 변경에는 닫혀 있어야한다.

        - 다형성 사용하고, 클라이언트가 DIP를 지킴.
        - 애플리케이션을 사용 영역과 구성영역으로 나눔
        - AppConfig가 의존관계를 FixDisCountPolicy --> RateDiscountPolicy로 변경해서 클라이언트 코드에 주입하므로
        클라이언트 코드는 변경하지 않아도 됨.

  --------------- ----------------- --------------- -------------------- -------------------

  IoC , DI , 컨테이너
  - 제어의 역전 IoC( Inversion of Control )
       - 기존 프로그램은 클라이언트 구현 객체가 스스로 필요한 서버 구현 객체를 생성하고, 연결하고, 실행.
       구현객체가 프로그램의 제어 흐름을 조종.
       - AppConfig 이후 구현 객체는 자신의 로직을 실행하는 역할만 담당. 프로그램에 대한 제어 흐름 권한은 AppConfig가 가진다.
       - 이러한 형식으로 외부에서 관리하는 것(AppConfig)를 Ioc(제어의 역전)이라고 한다.

      프레임 워크 / 라이브러리
       - 프레임워크가 내가 작성한 코드를 제어하고, 대신 실행하면 프레임워크 (jUnit)
       - 내가 작성한 코드가 직접 제어의 흐름을 담당한다면 라이브러리

  - 의존관계 주입 DI ( Dependency Injection )
        - 의존관계는 정적인 클래스 의존관계 와 실행시점에 결정되는 동적인 객체(인스턴스) 의존관계 둘을 분리해서 생각해야함.
        - 정적인 클래스 의존관계
            - 클래스가 사용하는 import 코드만 보고 의존관계를 쉽게 판단할 수 있다.
            - 정적 의존관계는 코드를 실행하지 않고도 분석할 수 있다.
        - 동적인 객체 인스턴스 의존 관계
            - 애플리케이션 실행 시점에 실제 생성된 객체 인스턴스의 참조가 연결된 의존관계다.

            클라이언트 ---> 주문 서비스 구현체 ---> + 메모리회원저장소
                                          ---> + 할인 정책

            - 애플리케이션 실행시점(런타임)에 외부에서 실제 구현 객체를 생성하고 클라이언트와 클라이언트 서버
            실제 의존관계가 연결되는 것을 의존관계 주입 이라고 한다.
            - 의존관계 주입을 사용하면 클라이언트 코드를 변경하지 않고, 클라이언트가 호출하는 대상의 타입 인스턴스를 변경할 수 있다.

  - IoC 컨테이너 , DI 컨테이너
        - AppConfig 처럼 객체를 생성하고 관리하면서 의존관계를 연결해주는 것을 IoC컨테이너 또는 DI 컨테이너.
        - 어셈블러 , 오브젝트 팩토리 등으로 불린다.


  ======================== =================== ========================== =======================
 4. 스프링 컨테이너

  - ApplicationContext를 스프링 컨테이너 라고 함.
  - 기존에는 개발자가 AppConfig를 사용해서 직접 객체를 생성하고 Dl를 했지만,
    이젠 스프링 컨테이너를 통해서 사용한다.

  - 스프링 컨테이너는 @Configuration이 붙은 AppConfig를 설정(구성) 정보로 사용한다.
    여기서 @Bean이라 적힌 메서드를 모두 호출해서 반환된 객체를 스프링 컨테이너에 등록한다.
  - 이렇게 스프링 컨테이너에 등록된 객체를 '스프링 빈'이라 한다.

  - 스프링 빈은 @Bean이 붙은 메서드의 명을 스프링 빈의 이름으로 사용한다. ( memberService , orderService )
  - 자바로 구현시 개발자가 필요한 객체를 AppConfig를 사용해서 직접 조회했지만,
    스프링에선 스프링 컨테이너를 통해 필요한 스프링 빈(객체)를 찾아야 한다.
    스프링빈은 applicationContext.getBean() 메서드를 사용해서 찾을 수 있다.

  